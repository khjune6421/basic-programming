250410

싹 다 헤더로 나누기
	HDC hDC = GetDC(hWnd);
	HDC hMemDC = CreateCompatibleDC(hDC);
	RECT clientRect = {};
	HBITMAP hBitmap = CreateCompatibleBitmap(hDC, WINDOW_WIDTH, WINDOW_HEIGHT);
	HBRUSH hBrush = CreateSolidBrush(RGB(255, 255, 255));
더블 버퍼링(그리고 지우는 작업을 가상 비트맵에서 하기)
변하지 않는 것들은 헤더로 빼자

	~DrawRandom()
	{
		DeleteObject(hBitmap);
		DeleteObject(hBrush);
		DeleteDC(hMemDC);
		ReleaseDC(hWnd, hDC);
		DestroyWindow(hWnd);
	}
소멸자로 메모리 헤제?


250415

ColliderCircle* pNewCollisionCircle = pNewObject->GetColliderCircle();
ColliderCircle struct형 포인터 받기

GameObject* pGameObject = (GameObject*)m_GameObjectPtrTable[i];
m_GameObjectPtrTable[i]; 를 GameObject class형 포인터 값으로 받기

250417

        bool Initialize()
        {
            m_LastError = CoCreateInstance(
                CLSID_WICImagingFactory, nullptr, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&m_pFactory));

            if (FAILED(m_LastError))
            {
                m_pFactory = nullptr;
                return false;
            }

            return true;
        }
팩토리를 초기화

        bool LoadImageFromFile(__in LPCWSTR filename, __out HBITMAP& hBitmap)
        {
            hBitmap = nullptr;
            if (m_pFactory == nullptr)
            {
                m_LastError = E_FAIL;
                return false;
            }

            m_LastError = m_pFactory->CreateDecoderFromFilename(
                filename, nullptr, GENERIC_READ,
                WICDecodeMetadataCacheOnLoad, &m_pDecoder);

            if (FAILED(m_LastError))
            {
                return false;
            }

            m_LastError = m_pDecoder->GetFrame(0, &m_pFrame);
            if (FAILED(m_LastError))
            {
                return false;
            }

            m_LastError = m_pFactory->CreateFormatConverter(&m_pConverter);
            if (FAILED(m_LastError))
            {
                return false;
            }

            m_LastError = m_pConverter->Initialize(m_pFrame, GUID_WICPixelFormat32bppPBGRA,
                WICBitmapDitherTypeNone, nullptr, 0.0f,
                WICBitmapPaletteTypeCustom);

            if (FAILED(m_LastError))
            {
                return false;
            }

            UINT width = 0, height = 0;
            m_LastError = m_pFrame->GetSize(&width, &height);

            if (FAILED(m_LastError))
            {
                return false;
            }

            BITMAPINFO bmi = { 0 };
            bmi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
            bmi.bmiHeader.biWidth = width; // 비트맵 너비
            bmi.bmiHeader.biHeight = -static_cast<LONG>(height); // top-down DIB
            bmi.bmiHeader.biPlanes = 1; // 비트맵 평면 수
            bmi.bmiHeader.biBitCount = 32; // 32bpp
            bmi.bmiHeader.biCompression = BI_RGB; // 압축 없음

            void* pvImageBits = nullptr;
            HDC hdc = GetDC(nullptr);
            hBitmap = CreateDIBSection(hdc, &bmi, DIB_RGB_COLORS, &pvImageBits, nullptr, 0);
            ReleaseDC(nullptr, hdc);

            if (FAILED(m_LastError))
            {
                return false;
            }

            // 비트맵에 픽셀 복사 (32bppPBGRA로 변환)
            m_LastError = m_pConverter->CopyPixels(nullptr, width * 4, width * height * 4, (BYTE*)pvImageBits);

            if (FAILED(m_LastError))
            {
                return false;
            }

            return true;
        }

몬가.. 몬가 일어나고 있음

        void Clean()
        {
            if (m_pDecoder) m_pDecoder->Release();
            if (m_pFrame) m_pFrame->Release();
            if (m_pConverter) m_pConverter->Release();
        }
포인터 할당 헤제

        BitmapInfo* CreateBitmapInfo(HBITMAP hBitmap)
        {
            BitmapInfo* pNewBitmap = new BitmapInfo(hBitmap);

            return pNewBitmap;
        }
HBITMAP을 받아 BitmapInfo 포인터 형식으로 반환

    BitmapInfo* CreateBitmapInfo(LPCWSTR filename)
    {
        static bool bCoInit = GWICInitializer.Initialize();
        if (false == bCoInit)
        {
            return nullptr;
        }

        HBITMAP hBitmap = nullptr;
        BitmapInfo* pBitmapInfo = nullptr;
        if (GWICInitializer.LoadImageFromFile(filename, hBitmap))
        {
            pBitmapInfo = GWICInitializer.CreateBitmapInfo(hBitmap);
        }

        GWICInitializer.Clean();

        return pBitmapInfo;
    }
파일을 받아 BitmapInfo 포인터 형식으로 반환

250418

struct Node
{
    Node() = delete;
    Node(const char* str) : pLinkNode(nullptr)
    {
        strcpy_s(this->str, str);
    }
    char str[32] = "";
    Node* pLinkNode;
};
노드 구조체. char 형식의 배열과 노드 포인터를 가지고 있다

void AddNode(const char* str)
{
    Node* pNewNode = new Node(str);

    pNewNode->pLinkNode = g_NodePtr;
    g_NodePtr = pNewNode;
}
이전 노드의 주소를 새로 만든 노드에 저장한다

void PrintNode()
{
    Node* pLink = g_NodePtr;
    while (pLink)
    {
        std::cout << pLink->str << "도 있고 \n";
        pLink = pLink->pLinkNode;
    }
}

void DeleteNode()
{
    Node* dLink = g_NodePtr;
    while (dLink)
    {
        std::cout << dLink->str << "도 없고 \n";
        dLink = dLink->pLinkNode;
		free(g_NodePtr);
		g_NodePtr = dLink;
    }
}
각각 노드의 주소를 따라가며 출력/할당 헤제를 한다

250422

씬 전환

int m_eCurrentScene = SCENE_TITLE;
  Scene* m_pScenes[SceneType::SCENE_MAX] = { nullptr, nullptr, nullptr };

m_pScenes[SceneType::SCENE_TITLE] = new TitleScene();
  m_pScenes[SceneType::SCENE_TITLE]->Initialize(this);


  m_pScenes[SceneType::SCENE_PLAY] = new PlayScene();
  m_pScenes[SceneType::SCENE_PLAY]->Initialize(this);

  m_pScenes[SceneType::SCENE_ENDING] = new EndingScene();
  m_pScenes[SceneType::SCENE_ENDING]->Initialize(this);

나누어서 관리?

250424

링크드 리스트

struct Node
{
	int num = 0;

	Node* previousNode = nullptr;
	Node* nextNode = nullptr;
};

int inputNum = 0;
Node* baseNode = new Node;
Node* baseNodePrev = new Node;
Node* baseNodeNext = new Node;
Node* firstNode = baseNode;

머리아픈 녀석
그러나 유용해 보인다